Full Stack Development:
 End-to-End application development.
 1) Front end
 2) Back end
 3) Databases


DAY 1:

1)Front end:- User interface; visible part of application
  -HTML: Hypertext markup language
	text - content
	hypertext - text with multiple links
	markup - consists tags to create content on website
	--HTML is used to create structure of the contents that are displayed in an application

  -CSS: Cascading Style Sheet
	--used to add style to website; make website to look attractive
	1.font    	4.shape
	2.color   	5.size         
	3.position	6.etc.
	
  -Java Script: used to create dynamic websites; form validations
	1.static websites: interface remains constant for everyone
	2.dynamic websites: changes depending on the user

DAY 2:
JavaScript: scripting language; high level programming language; weakly/loosely typed language; lightweight and dynamic language; used to build user interface.
- introduced in 1995 by Brenden eich; Netscape navigator; first js program was developed within 7-8 days with the name mocha.
- applications: mobile, smartwatch, web apps, server side apps, gaming

Types of variables in JS: var, let, const. 


Day 3:
Variables:- 
	1. Case-sensitive
	2. start with letters, _(under score), $(dollar)
	3. cannot start with numbers
	4. Reserved(key) words are not allowed
	5. Allow letters, numbers, underscore, dollar
	a. Reassigning variables with var is accepted
	b. Reassigning with let is accepted
	c. Reassigning with const is not accepted
	i. Redeclaring with var is accepted
	ii. redeclaring with let is not accepted
	iii. Redeclaring with const is not accepted

Block Scope:
	1. Variables declared with var do not have block scope
	2. Variables declared with let have block scope


Day 5:
JavaScript operators:
	1. Arithmetic: +, -, *, /, %, **, ++, --
	<body>
    	   <script>
        	let a=5
        	let b=10
        	document.write(b%a, "<br>")
        	document.write(b/a, "<br>")
        	document.write(b**a, "<br>")
        	a++
        	document.write(a, "<br>")
        	b--
        	document.write(b)
    	   </script>
	</body>

	2. Assignment: =, +=, -=
	let a=5
        let b=10
        a+=20
        document.write(a, "<br>")
        b-=2
        document.write(b)

	3. Logical: and(&&), or(||), not(!)
	let a=5
        let b=10
        document.write(a>b && a>10, "<br>")
        document.write(a>b || a>10, "<br>")
        document.write(a!=b )

	4. Relational: >, <, ==, !=, <=, >=, ===, !==
	let a=10
        let b='10'
        document.write(a==b, "<br>")
        document.write(a===b, "<br>")
        document.write(a!==b, "<br>")
        document.write(a!=b, "<br>")
        document.write(a<=b, "<br>")
        document.write(a<b, "<br>")

	5. Conditional: Ternary (?)
	let a=10
        let b=(a>10) ? "Ac-off":"AC-on"
        document.write(b)

Window Methods:
	1. alert()
	alert("OH NO!!")
        console.log(alert)

	2. prompt()
	let name=prompt("Enter alert message")
        alert(name)
	
	let a=prompt()
        let b=prompt()
        document.write(typeof(a))
        console.log(a+b)

Day 6: 

Conditional Statements:
	executing the instructions only when the given condition is true. used to decide whether the condition is 	executed or skipped.
	Block of code: set of instructions
	Condition: an expression that evaluates a result
	Methods: if, if-else, else if, switch, ternary
	1. if:
		if(condition){
			block of code
		}
	Example: positive condition
	let a=4
        let b=5
        if(a<b){
            document.write("Yay!!","<br>")
        }
        document.write("Execute Anyway")
	
	Example: negative condition
	let a=4
        let b=5
        if(a>b){
            document.write("Yay!!","<br>")
        }
        document.write("Execute Anyway")

Q)Write a program that reads the scores A and B of two players and checks if one of the scores is greater than 300 and sum of the scores is less than 500.

Input: the first line of input contains an integer representing the score A. and the second line of input contains an integer representing the score B.

Output: the output should be a single line containing a string

Code:
let a= prompt("Score of A: ")
        let b= prompt("Score of B: ")
        let c=a+b
        if(a>300 || b>300 && c<500){
            alert("Can team up")
        }else{
            alert("Cannot team up")
        }

Day 7:

Program solving with JavaScript:

1. Write a program to check whether the number is divisible by 2 and 3 and both (take prompt)

let a= prompt("Enter number: ")
        let a= prompt("Enter number: ")
        if(a%2==0 && a%3==0){
            alert(a+" is divisible by 2 and 3")
        }else if(a%2==0){
            alert(a+" is divisible by 2")
        }else if(a%3==0){
            alert(a+" is divisible by 3")
        }else{
            alert(a+" is not divisible by 2 and 3")
        }

2. Write a program to find the largest number of the three numbers 

let a=parseInt(prompt("Enter num 1"))
        let b=parseInt(prompt("Enter num 2"))
        let c=parseInt(prompt("Enter num 3"))
        if(a>b && a>c){
            alert(a+" is the largest")
        }else if(b>a && b>c){
            alert(b+" is the largest")
        }else{
            alert(c+" is the largest")
        }

3. Accept the following from the user and calculate the percentage of classes attended
	a) total number of working days
	b) total number of days of absence
   After calculating percentage show that, if the percentage is less than 75, then student will not
   be eligible to write exam.

let working_days=parseInt(prompt("Enter the number of working days"))
        let absence=parseInt(prompt("Enter the number of days of absence"))
        let presence=working_days-absence
        let percentage=(presence/working_days)*100
        if(percentage>=75){
            alert("You are eligible for writing exam")
        }else{
            alert("You are not eligible for writing the exam")
        }

4. A company decided to give bonus to employee according to the following criteria:
	time 				bonus
	more than 10 years		10%
	>=6 years and <=10		8%
	less the 6			5%
   ask the user for their salary and years of experience and print the bonus amount

let salary=parseInt(prompt("Enter salary"))
        let years=parseInt(prompt("Enetr years"))
        
        if(years>10){
            let b=salary*10/100
            let bonus=b+salary
            alert("Your current salary is "+salary+" your salary with bonus is "+bonus)
            
        }else if(years>=6 && years<=10){
            let b=salary*8/100
            let bonus=b+salary
            alert("Your current salary is "+salary+" your salary with bonus is "+bonus)
            
        }else{
            let b=salary*6/100
            let bonus=b+salary
            alert("Your current salary is "+salary+" your salary with bonus is "+bonus)
        }
Day 8:

Switch case:

let num=parseInt(prompt("Enter a number"))
        switch(true){
            case num>0:
                alert("number is positive")
                break;
            case num==0:
                alert("number is zero")
                break;
            case num<0:
                alert("number is negative")
                break;
            default:
                alert("invalid input")
                
        }

Q) The charges per unit for different ranges:
	0-50 units - 2
	51-150 units - 3
	151-250 units - 5
	250 and above units - 8

#450
50 - 50*2=100
100 - 100*3=300
100 - 100*5=500
200 - 200*8=1600
bill=2500
total=2500 + (2500*0.2) = 3000

let u=parseInt(prompt("Enter number of units"))
        let c=0
        if(u<=50 && u>=0){
            c=u*2
        }else if(u<=150 && u>50){
            c=(50*2)+(u-50)*3
        }else if(u<=250 && u>150){
            c=(50*2)+(100*3)+(u-150)*5
        }else if(u>=250){
            c=(50*2)+(100*3)+(100*5)+(u-250)*8
        }
        c=c + (c*0.2)
        document.write(c)

Q) number of class students. everyone shake hands. count of handshakes
let n = prompt("enter number of students")
        let count=0
        for(let i=1; i<=n; i++){
            let hs=n-i
            count=count+hs
        }
        document.write(count)


Day 9:
Loops:
 1. for
	syntax:- for(initialization; condition; updation){
		 block of code }

	example:- for(let i =10; i<=15; i++){
            		document.write(i+" ","<br>")
        	  }

	example:- for(let i=2; i<=9; i=i+2){
            		document.write(i+3, "<br>")
        	  }
			//i=2 ; 4 ; 6 ; 8 ; 10 
        		//c= 2<=9 ; 4<=9 ; 6<=9 ; 8<=9 ; 10 not <=9
        		//u= i+2= 2+2=4 ; 4+2=6 ; 6+2=8 ; 8+2=10
        		//b= i+3= 2+3=5 ; 4+3=7 ; 6+3=9 ; 8+3=11
        		//output = 5 7 9 11


	Q) repeat 5 times

		var a="Twin crowns"
        for(let i=1; i<=5; i++){
            document.write(a, "<br>")
        }

	output:- Twin crowns
		 Twin crowns
		 Twin crowns
		 Twin crowns
		 Twin crowns	


	Q)print 9 table

		let n=9
        for(let i=1; i<=10; i++){
            document.write("9 x "+i+" ="+n*i,"<br>")
        }

	output:- 9 x 1 =9
		 9 x 2 =18
		 9 x 3 =27
		 9 x 4 =36
		 9 x 5 =45
		 9 x 6 =54
		 9 x 7 =63
		 9 x 8 =72
		 9 x 9 =81
		 9 x 10 =90
	
	Q) add nums in array
	
		const numbers=[1,2,3,4,5]
        let a=0
        for(let i=0; i<numbers.length; i++){
            a=a+numbers[i]
            document.write(a,"<br>")
        }
        document.write("final output: "+a)

	output:- 1
		 3
		 6
		 10
		 15
		 final output: 15


 2. for in :- to iterate all the elements in a constant
	
	Example:
 		const a= "Dwija"
        for(let i in a){
            document.write(a[i],"<br>")
        }


 3. for of :- to iterate the arrays.

	Example:
 		const b = ["abc","bcd","cde"]
        for(let bb of b){
            document.write(bb,"<br>")
        }


 4. while :- infinite loop
	
	syntax:- 
		while(condition){
			block of code
		}

	Example:
		 let n=5, i=1
        while(i<=5){
            document.write(i)
            i++
        }

 
	Example:
		 let n=8, i=2
        while(i<=n){
            document.write(i+1)
            i=i+2
        }
	
	//i= 2 , i+2= 2+2=4 , 4+2=6 , 6+2=8
	//i+1= 2+1=3 , 4+1=5 , 6+1=7 , 8+1=9
	//output:- 3,5,7,9


 5. do while : - to execute a block of code atleast for once

	Example:-
		let c=0
        do{
            document.write("count : "+c, "<br>")
            c++
        }while(c<5)

Break:- to stop the iteration

	Example:- 
		for(let i=1; i<=8; i=i+1){
            if(i==4){
                break
            }
            document.write(i)
        }

	
	Example:-
		for(let i=2; i<=8; i=i+2){
            		if(i>4){
                	break
            		}
            		document.write(i+1)
        	}


Continue:- to skip the condition

	Example:- 
		 for(let i=2; i<=8; i=i+2){
            		if(i>4){
                	continue            		}
            		document.write(i+1)
        	}


	Example:-
		for(let i=1; 1<=8; i=i+2){
            		if(i>5){
                	continue
            		}
            		console.log(i+1)
        	}

		//i= 1 , 3 , 5 , 7
		//c= 1<=8 , 3<=8 , 5<=8 , 7<=8
		//u= i+2 = 1+2=3 , 3+2=5 , 5+2=7
		//o= i+1 = 1+1=2 , 3+1=4 , 5+1=6

Day 11:-
 
Nested Loops: A loop inside an other loop, the inner loop will execute one time for each iteration of the outer loop.

	Example:
		for(let i=1; i<=3; i++){
            		document.write(i, "<br>")
            		for(let j=1; j<=4; j++){
                		document.write(j, " ")
            		}
            		document.write("<br>")
        	}

		//Outer block = 1
		//inner block = 1 2 3 4
		//outer block = 2
		//inner block = 1 2 3 4
		//outer block = 3
		//inner block = 1 2 3 4

Example:- 
*
**
***
****
*****
 
code:- for(let i=1; i<=5; 1++){
            for(let j=1; j<=i; j++){
                document.write("*")
            }
            document.write("<br>")
        }



Day 12:-
Functions:
	A function is a reusable block of code (write once and can run multiple times)
Key word - function
parameters = values or variables which are declared inside the () while defining a function
Arguments = values which are passed through the parameters at the time of calling the function

Example:

function greet(){
            document.write("Hi!","<br>")
        }
        greet()
        document.write("Hi user","<br>")
        greet()


Example:

function g(name){
            console.log( "hello "+ name)
        }
        let name=prompt("Enter name")
        g(name)

Example:

 let num1=parseInt(prompt("Enter num 1"))
        let num2=parseInt(prompt("Enter num 2"))
        function add(num1,num2){
            document.write(num1+num2)
        }
        add(num1,num2)


Return:
the return statement can be used to return the value to function call

Example:
function a(aa,bb){
             return aa+bb
         }
        // let n1=parseInt(prompt("num 1"))
        // let n2=parseInt(prompt("num 2"))
        // let result=a(n1,n2)
        // document.write(result)

Q) program to check whether number is prime
Q) Fibonacci series :- 0 1 1 2 3 5 8 13
Q) leap year
Q) Armstrong number 
Q) palindrome :- 1223221
Q) pattern


Day 13:
Arrow Functions:- 
1. Es6 version - more readable and more structured ; anonymous functions ; no name for function but are assigned to a variable.

Example:- Arrow function without parameter
	
	let c=()=>{
            document.write("Hello")
        }
        c()

Example:- Arrow function with parameter

	let a=(x,y)=>{
            document.write(x+y,"<br>")
        }
        a(20,30)
        a(40,50)

Example:- Arrow functions with one argument

	let a=x=>document.write(x)
        a("Konnechiwa")

Example:- Arrow functions without argument

	let a=()=>document.write("Hola")
        a()

Example:- Arrow functions as an expression

	let age=8
        let a=(age<18)?
        ()=>document.write("yonger"):       
        ()=>document.write("older")
        a()

Synchronous function:- Execute step by step

	function task1(){
            document.write("1-done","<br>")
        }

        function task2(){
            document.write("2-done","<br>")
        }

        function task3(){
            document.write("3-done","<br>")
        }
        task1()
        task2()
        task3()

Asynchronous function:- Execute multiple tasks

	document.write("yo","<br>")
        
        setTimeout(()=>{
            document.write("waiting...","<br>")
        },3000)
        document.write("sh")



Day 14:-

Callback functions:- is an function passed as argument to another function

Example:-

	function a(name, callback){
            document.write("hello,"+name+", ")
            callback()
        }

        function z(){
            document.write("bye")
        }

        a("sam", z)

Example:- callback function as anonymous function

	function mainFunction(name, callback){
            document.write("hello"+name, "<br>")
            callback()
        }
        mainFunction("Dwija",function(){
            document.write("Artist")
        })


Example:- asynchronous callback with setTimeout

	function fetchData(callback){
            document.write("Fetching data")
        setTimeout(function(){
            document.write("Data fetched","<br>")
            callback()
        },2000)
        }
        function processData(){
            document.write("Processing")
        }

        fetchData(processData)


Day 15:-

Promise in javascript: it is a special javascript object that represents eventual completion or failure, of an asynchronous operation.

Promises can be of three states:
1. Pending: the initial state, the promise is still waiting for the operation to complete to finish.
2. Fulfilled: the operation completed successfully.
3. Rejected: the operation falied.


To create a promise: new promise();
the promise constructor takes a function with two parameters: resolve and reject
resolve - to mark as the promise is successful
reject - to mark as failed

Handling the promise: .then() method and .catch() method
.then()- called whrn promise is fulfilled, it receives the result from the resolve.
.catch()- called when the promise is rejected, it receives the result from the reject.


Example:
	
	let a= new Promise((resolve, reject)=>{
            let success=true
            if(success){
                resolve('successful')
            }
            else{
                reject("failed")
            }
        });
        a
        .then(result=>{
            document.write(result)
        })
        .catch(error=>{
            document.write(error)
        })


Chaining promises: 

Example:

	let a=new Promise((resolve, reject)=>{
            resolve(5);
        })
        a
        .then(result=>{
            document.write(result)
            return result*2
        })
        .then(result=>{
            document.write(result)
            return result+3
        })
        .then(result=>{
            document.write(result)
        })
        .catch(error=>{
            document.write(error)
        })

Example: promise with setTimeout

	let a=new Promise((resolve, reject)=>{
            setTimeout(()=>{
                resolve(5)
            },2000)
           
        })
        a.then(result=>{
            document.write(result)
        })



Day 17:-
Get Element by Class name
 returns all the elements having the same class name. getElementbyClassName() method returns html collection object.

a html collection is array like list of html elements. length property provides the size of the collection.

Example:-

	<body>
    <h1 class="a">Hello</h1>
    <h1 class="b">Bonjour</h1>
    <h1 class="c">Hola</h1>
    <script>
        let x=document.getElementsByClassName("a")
        //document.write(x)

        for(let i=0; i<x.length;i++){
            console.log(x[i])
        }
    </script>
</body>


Getting element by tagname:-

method used is GetElementbyTagName(), it takes a tag name as string

Example:-

	let x=document.getElementsByTagName("h1")
        //document.write(x)

        for(let i=0; i<x.length;i++){
            console.log(x[i])


Queryselector: - used to select html elements by class name or tagname

Example:-
	
	let x=document.querySelector("h1")
        console.log(x)

QuerySelectorAll:- used to select html elements by class name or tagname, returns in the form of nodeList.

Example:-

	let x=document.querySelectorAll("h1")
        console.log(x)


Manipulate elements:-
to create a html element : createElement() is used

Example:-

	 let d=document.createElement("h2")
        d.className="dd"
        d.textContent="d for dwija"
        console.log(d)
	document.body.appendChild(d)

Example:-

	const colors=['blue','black','red']
        for(let i=0;i<colors.length;i++){
            let t=document.createElement("h2")
            t.className="d"
            t.textContent=colors[i]
            
            console.log(t)
        }



Day 20:-

1. create element
2. single elements
3. multiple elements

removeChild() - removes child elements from parent node

Example:- 

<body>
    <h1>Removing childNode</h1>
    <h2>hyd</h2>
    <ul>
        <li>Black</li>
        <li>White</li>
        <li>rainbow</li>
    </ul>
    <script>
        const ul=document.querySelector("ul")
        const lists=document.querySelectorAll("li")
        // console.log(ul)
        // console.log(lists)
        for(const list of lists){
            console.log(`Removing: ${list.textContent}`)
            ul.removeChild(list)
            console.log(lists)
            //console.log(list)
        }
    </script>
</body>


Example:- .appendChild()
	
<body>
	<div id="a">
        <h1>Subjects</h1>
    </div>
    <div id="b">
        <h1>Impt</h1>
    </div>

<script>
        
        let n=document.createElement('b')
        n.textContent="star"

        let p =document.getElementById('b')
        p.appendChild(n)
        console.log(p.innerText)
    </script>
</body>



Day 21:-

DOM methods:
	
	insertBefore():- used to insert a new node before an existing node as child node of a specified parent.

	Requires a reference to both the new node and existing node you want to insert before.

Example:-

<body>
    <div id="a">
        <h1>Hi</h1>
        <h1>world</h1>
    </div>
    <div id="b">
        <h2 id="r">2</h2>
        <h2>3</h2>
    </div>
    <script>
        let n=document.createElement('h2')
        n.textContent='1'

        let p=document.getElementById('b')
        let l=document.getElementById('r')

        p.insertBefore(n,l)
    </script>
</body>

Example:-

<body>
    <div id="a">
        <h1 id="d">Hi</h1>
        <h1>world</h1>
    </div>
    <div id="b">
        <h2 id="r">2</h2>
        <h2>3</h2>
    </div>
    <script>
        let n=document.createElement('h2')
        n.textContent='1'

        let p=document.getElementById('b')
        let l=document.getElementById('r')

        p.insertBefore(n,l)

        let m=document.createElement('h1')
        m.textContent="Dwija says"

        let q=document.getElementById('a')
        let k = document.getElementById('d')

        q.insertBefore(m,k)
    </script>
</body>




Day 22:-


1. JavaScript
2. React JS
3. frontend - projects
4. springboot - java
5. MySQL
6. Material UI
7. End-End javascript



Senario 1: Voting eligibility system

You are tasked with building a system to check whether a person is eligible to vote. the system follows these rules:

1.A person must be at least 18 years old to vote
2.If the person is a citizen, they are eligible to vote
3.If the person is not a citizen, but has passed the citizenship test then they are eligible to vote
4.If the person is under 18, they cannot vote

        let age = parseInt(prompt("Enter age: "))
        let citizen = prompt("Are you a citizen (Yes/No) ? ")
        if(age>18 && citizen=='Yes'){
            document.write("Eligible to vote")
        }
        else if(citizen=="No"){
            let test= prompt("Did you pass the citizenship test (Yes/No) ?")
            if(test=="Yes"){
                document.write("Eligible to vote")
            }
            else{
                document.write("Not eligible to vote")
            }
        }
        if(age<18){
            document.write("Not eligible to vote")
        }


Scenario 2: Discount

let amount_spent=parseFloat(prompt("Enter amount spent: "))
        let premimum=prompt("Are you a premium member (Yes/No)?")
        if(amount_spent>100 && premimum=="No"){
            let dicsount=amount_spent*0.2
            let price=amount_spent-dicsount
            document.write("Price after discount "+price)
        }
        else if((amount_spent>50 && amount_spent<=100) && premimum=="No"){
            let dicsount=amount_spent*0.1
            let price=amount_spent-dicsount
            document.write("Price after discount "+price)
        }
        else if(amount_spent>100 && premimum=='Yes'){
            let dicsount=amount_spent*0.25
            let price=amount_spent-dicsount
            document.write("Price after discount "+price)
        }
        else if((amount_spent>50 && amount_spent<=100) && premimum=="Yes"){
            let dicsount=amount_spent*0.15
            let price=amount_spent-dicsount
            document.write("Price after discount "+price)
        }




Day 23:-

React JS - a javascript library.It is divided into components and updating is easy.

 node -v
v20.11.0
 npm -v
10.2.4
 npx create-react-app new-app

Creating a new React app in C:\Users\Micro\OneDrive\Desktop\training\react\new-app.




Day 24:-

a.js:


const b=React.createElement(
    'h1',{id:'a'}, "I am Dwija"
);
const element=document.getElementById('r')
const root=ReactDOM.createRoot(element)
root.render(b)


a.html:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
<script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
</head>
<body>
    <div id="root"></div>
    <script src="a.js"></script>
</body>
</html>



Jsx:-

JavaScript Xml
It is a syntax extension for Js



Day 25:-


To create an element in react Js React.cerateElement() method

Syntax:
Type=tag name(h1, p, div)
Prop=class, id
ReactDOM.createRoot()


Jsx allows us to wite HTML code in JS. jsx all html tags must be closed. jsx compiles the html code to js.  Babel is a tool in jsx.


Example:


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id='a'></div>
    <script type="text/babel">
        const element=<h1 className="aa">Welcome to MRU</h1>
        const e=document.getElementById('a')
        const root=ReactDOM.createRoot(e)
        root.render(element)
    </script>
    <!-- <script >
        const b=React.createElement("h1", {id:'c'}, "I am Dwijasri")
        const e=document.getElementById('a')
        const root=ReactDOM.createRoot(e)
        root.render(b)
    </script> -->
</body>
</html>

Example:


<script type="text/babel">
        // const n=12
        // const m=<h1>multiply by 10={n*10}</h1>
        // //const element=<h1 className="aa">Welcome to MRU</h1>
        // const e=document.getElementById('a')
        // const root=ReactDOM.createRoot(e)
        // root.render(m)
        const App=()=>{
            const isLoggedTrue=true;
            return(
            <div>
                {isLoggedTrue? (<h1>Welcome </h1>):(<h1>Please Login</h1>)}
                {isLoggedTrue &&<h1>New notification</h1>}
            </div>
        )
        }
        const root=ReactDOM.createRoot(document.getElementById('root'))
        root.render(<App/>)
    </script>

Functions:
using a function call directly within jsx.

Example:
<div id='a'></div>
    <script type="text/babel">
        function getGreeting(name){
            return `Hello, ${name}! Welcome`
        }
        function Greeting(){
            const name=`Dwija`
            return <h1>{getGreeting(name)}</h1>
        }
        const root=ReactDOM.createRoot(document.getElementById('a'))
        root.render(<Greeting/>)
<script/>



Day 26:-


React app

index.html :- file is the entry point for the app
index.js :- is the javascript entry point for the react app where dom is rendered.
App.js :- main component

components:- are the building blocks of react
	-reusable code
	-types: class ; functional.



Example:-

App.js:

import React from "react";
import './App.css'

const Welcome=()=> <h1 className="message">Hello</h1>

function App(){
  return(
    <div className="App">
      <Welcome/>
    </div>
  )
}
export default App;

App.css:

.message{
  color:blueviolet;
  background-color: blanchedalmond;
  font-size: 40px;
  text-align: center;
  
}




Day 27:-

map(): elements in array
function will be applied to all the elements

const n=[1,2,3,4,5]
const d=n.map(num=>num*2)



Day 29:-

1) useStateHook:
it allows you to add state to functional components.

Syntax:
const[state, setState]=useState(initial value)

state: the current state.
setState: the function to update the state.
initial value: The value you want to set as initial value.





React memo: it is a High order component, it will stop unnecessary rendering of functional components of its props. it will improve the performance of the functional components.

Example:

App.js:
import {useState} from 'react';
import ChildA from "./ChildA";
import ChildB from "./ChildB";

const Parent=()=>{
  const[count, setCount]=useState(0);
  const increment=()=>{
    setCount(c=>c+1);
  };
  return(
    <div>
      <ChildA/>
      <ChildB count={count} increment={increment}/>
    </div>
  )
};

export default Parent;



ChildA.js:
// const ChildA=()=>{
//     console.log("Child A rendered")
//     return <h2> This is Child A</h2>
// };
// export default ChildA;

import {memo} from 'react';
const ChildA=()=>{
    console.log("Child A rendered")
    return <h2>This is Child A</h2>
};
export default memo(ChildA);




ChildB.js:
const ChildB=({count, increment})=>{
    console.log("Child B is renedered")
    return(
        <div>
            <h1>Count: {count}</h1>
            <button onClick={increment}> Increment </button>
        </div>
    )
}
export default ChildB;




use Context():

props(properties): in react are used to pass data from parent component to child component.

Prop drilling: is a process of passing data from parent component to deeply nested child components through intermediate components, by passing data as props at each level parent.




